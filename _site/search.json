[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "code/ubuntu_bash.html",
    "href": "code/ubuntu_bash.html",
    "title": "Aide-mémoire Ubuntu & bash",
    "section": "",
    "text": "Aide-mémoire Ubuntu & bash\n\n\n\n\n\n\n\n\n\ncommande [paramètres] [arguments]\nRôle\n\n\n\n\n\n\ngnome-system-monitor\néquivalent de ‘task manager’\n\n\n\n\nchown\nchanges the owner of the file or directory specified by the File or Directory parameter to the user specified by the Owner parameter\n\n\n\n\nll\nalias pour ls -l\n\n\n\n\n‘ls -1 | wc -l’\ndénombre quantité de files\n\n\n\n\nhistory\nhistorique des commandes\n\n\n\n\nfc -l -xx\nles xx dernières commandes effectuées\n\n\n\n\nfc -s xx\nrelance la commande numéro xx\n\n\n\n\nfc -s fc=ls xx\nrelance la commande xx en remplaçant\nfc par ls\naller début de la ligne\n\n\nctrl + a\naller fin ligne\n\n\n\n\nctrl + e\ncleaner le termine\n\n\n\n\nctrl + l\neffacer la ligne jusqu’au début\n\n\n\n\nctrl + k\neffacer la ligne jusqu’à la fin\n\n\n\n\ntouch   \ncreate one or several files\n\n\n\n\nvi \ni for insert\n\n\n\n\nnano\nread, modify & save a file - There are two modes - cf RedHat Vi infoseasier!!!\n\n\n\n\nmkdir\ncréation d’un dossier\n\n\n\n\nrmdir\nefface un dossier\n\n\n\n\nrm \neffacer un fichier\n\n\n\n\nrm -rf \neffacer un dossier\n\n\n\n\nrealpath  ou pwd\nchemin absolu\n\n\n\n\necho\naffiche du texte\n\n\n\n\nnpm\nlibrary and registry for JavaScript software packages. npm also has command-line tools to help you install the different packages and manage their dependencies\n\n\n\n\nzip -r &lt;file.zip&gt; \nzip un dossier\n\n\n\n\nsed -i ‘s/old-text/new-text/g’ input.txt\nfind and replace in file(s) cf docu\n\n\n\n\nsed -s ‘2!d’ *.txt &gt; test_cat2.txt\nconcatenate second line of several files\n\n\n\n\nsudo dpkg -i xxx.deb\ninstallation d’un package téléchargé\n\n\n\n\nquarto render xxx.qmd\ncompilation en local d’un fichier quarto\n\n\n\n\n[ctrl][Alt][f5]\nmode tty\n\n\n\n\n[alt][F1]\nexit mode tty\n\n\n\n\nmv ex.txt new.txt\nrenommer un fichier\n\n\n\n\nscp (-r) file/folder_to_send targeted_folder\n-r is for recursive s’il s’agit d’un dossier à envoyer. exemple pour calcul Canada scp ccjuhasz@narval.computecanada.ca:projects/def-dgravel/ccjuhasz/sf_converted_occ_pres_only2.zip\n\n\n\n\nogrinfo -sql “CREATE INDEX index_name ON table_name (column1, column2,columnN…)” my_geopackage.gpkg\nIndex creation for sql request to geopackage file\n\n\n\n\nogrinfo file.gpkg\ngive the name of the database"
  },
  {
    "objectID": "code/python_aide-memoire.html",
    "href": "code/python_aide-memoire.html",
    "title": "Aide-mémoire Python",
    "section": "",
    "text": "Certains mots font partie du langage Python, et ne peuvent pas être utilisés comme noms de variables. Par exemple, def, match, case, _, del , if, else, break & continue."
  },
  {
    "objectID": "code/python_aide-memoire.html#listes",
    "href": "code/python_aide-memoire.html#listes",
    "title": "Aide-mémoire Python",
    "section": "Listes",
    "text": "Listes\nlist=[el1, el2, el3, ...]"
  },
  {
    "objectID": "code/python_aide-memoire.html#tuples",
    "href": "code/python_aide-memoire.html#tuples",
    "title": "Aide-mémoire Python",
    "section": "Tuples",
    "text": "Tuples\nSimilaire aux listes mais non modifiables et définit avec () au lieu de [].\ntuple=(el1, el2, el3, ...)"
  },
  {
    "objectID": "code/python_aide-memoire.html#dictionnaires",
    "href": "code/python_aide-memoire.html#dictionnaires",
    "title": "Aide-mémoire Python",
    "section": "Dictionnaires",
    "text": "Dictionnaires\nUn dictionnaire est une structure de données qui enregistre des données dans des paires clés-valeurs. Un dictionnaire est défini à l’aide des {}.\n\nnouvelle_campagne = {\n\"responsable_de_campagne\": \"Jeanne d'Arc\",\n\"nom_de_campagne\": \"Campagne nous aimons les chiens\",\n\"date_de_début\": \"01/01/2020\",\n\"influenceurs_importants\": [\"@MonAmourDeChien\", \"@MeilleuresFriandisesPourChiens\"]\n}\nLa fonction dict() peut aussi être utilisée.\nd = dict([\n    (&lt;key&gt;, &lt;value&gt;),\n    (&lt;key&gt;, &lt;value),\n      .\n      .\n      .\n    (&lt;key&gt;, &lt;value&gt;)\n])\nUne valeur peut être un objet complexe telle qu’une liste. Il est possible de modifier le dictionnaire après sa création.\n# creation dictionnaire\ninfos_labradoodle = {\n    \"poids\": \"13 à 16 kg\",\n    \"origine\": [\"États-Unis\", \"Canada\"]\n}\n\n# Ajout d'une paire clé-valeur\ninfos_labradoodle[\"nom_scientifique\"]=\"Canis lupus familiaris\"\n\n# Appel des valeurs associées à origine\nprint(infos_labradoodle[\"origine\"]) # [\"États-Unis\", \"Canada\"]\nprint(infos_labradoodle[\"origine\"][0]) # Canada\n\n# Suppression d'une association clé-valeur avec l'utilisation d'un mot clé del\ndel infos_labradoodle[\"nom_scientifique\"] # retrait de l'association nom_scientifique - Canis lupus familiaris\ndel infos_labradoodle[\"origine\"][0] # retrait de la première valeur associée à origine\n\n# Vérification de l'existence d'une clé\n\nprint(\"poids\" in infos_labradoodle) # True\nprint(\"race\" in infos_labradoodle) # False"
  },
  {
    "objectID": "code/python_aide-memoire.html#méthodes-les-plus-courantes-associées-aux-listes",
    "href": "code/python_aide-memoire.html#méthodes-les-plus-courantes-associées-aux-listes",
    "title": "Aide-mémoire Python",
    "section": "Méthodes les plus courantes associées aux listes",
    "text": "Méthodes les plus courantes associées aux listes\n\n\n\n\n\n\n\nméthode\ndéfinition\n\n\n\n\nextend()\nAjoute plusieurs éléments à la fin\n\n\ninsert()\nInsère un élément à une position donnée\n\n\npop()\nSupprime et renvoie l’élément à une position donnée ou le dernier élément si aucun indice n’est spécifié\n\n\nindex()\nRenvoie la première occurrence de l’élément spécifié\n\n\ncount()\nRenvoie le nombre d’occurrences de l’élément spécifié\n\n\nreverse()\nInverse l’ordre des éléments\n\n\n\nlist=[el1, el2, el3]\nlist.append(el4) # el1, el2, el3, el4\nlist.reverse() # el4, el3, el2, el1\nCf documentation python sur les méthodes."
  },
  {
    "objectID": "code/python_aide-memoire.html#méthodes-les-plus-courantes-associées-aux-dictionnaires",
    "href": "code/python_aide-memoire.html#méthodes-les-plus-courantes-associées-aux-dictionnaires",
    "title": "Aide-mémoire Python",
    "section": "Méthodes les plus courantes associées aux dictionnaires",
    "text": "Méthodes les plus courantes associées aux dictionnaires\n\n\n\n\n\n\n\nméthode\ndéfinition\n\n\n\n\nkeys()\n​​Retourne une vue sur les clés du dictionnaire\n\n\nvalues()\nRetourne une vue sur les valeurs du dictionnaire\n\n\nitems()\nRetourne une vue sur les couples (clé, valeur) du dictionnaire\n\n\nget(clé)\nRetourne la valeur associée à la clé spécifiée. Si la clé n’est pas présente dans le dictionnaire, retourne la valeur None\n\n\npop(clé)\nSupprime la clé spécifiée et retourne la valeur associée. Si la clé n’est pas présente dans le dictionnaire, retourne la valeur None\n\n\nclear()\nSupprime tous les éléments du dictionnaire"
  },
  {
    "objectID": "code/python_aide-memoire.html#ifelifelse",
    "href": "code/python_aide-memoire.html#ifelifelse",
    "title": "Aide-mémoire Python",
    "section": "if/elif/else",
    "text": "if/elif/else\nLes instructions if/elif/else permettent de définir des conditions multiples. Le mot-clé elif vous permet d’ajouter autant de conditions que vous voulez. Vous devez ensuite terminer avec une instruction else. Les opérateurs logiques and, or, not peuvent être utilisés pour vérifier des conditions multiples au sein d’une même instructions.\nfruit = \"pomme\"\nif fruit==\"pomme\":\n    print(\"J'aime les pommes !\")\nelif fruit==\"banane\":\n    print(\"J'aime les bananes !\")\nelif fruit==\"orange\":\n    print(\"Les oranges sont bonnes pour la santé.\")\nelse :\n    print(\"Je ne connais pas ce fruit.\")\nAfin de rendre plus lisible ce genre de boucle, les match cases peuvent être utilisés.\nmatch fruit:\n    case \"pomme\":\n        print(\"J'aime les pommes !\")\n    case \"banane\":\n        print(\"Je n'aime pas les bananes.\")\n    case \"orange\":\n        print(\"Les oranges sont bonnes pour la santé.\")\n    case _:\n        print(\"Je ne connais pas ce fruit.\")"
  },
  {
    "objectID": "code/python_aide-memoire.html#for",
    "href": "code/python_aide-memoire.html#for",
    "title": "Aide-mémoire Python",
    "section": "for",
    "text": "for\nraces_de_chien = [\"golden retriever\", \"chihuahua\", \"terrier\", \"carlin\"]\nfor chien in races_de_chien:\n    print(chien)"
  },
  {
    "objectID": "code/python_aide-memoire.html#while",
    "href": "code/python_aide-memoire.html#while",
    "title": "Aide-mémoire Python",
    "section": "while",
    "text": "while\ncapacite_maximale = 10\ncapacite_actuelle = 3\nwhile capacite_actuelle &lt; capacite_maximale:\n    capacite_actuelle += 1"
  },
  {
    "objectID": "code/python_aide-memoire.html#plusieurs-listes-en-même-temps",
    "href": "code/python_aide-memoire.html#plusieurs-listes-en-même-temps",
    "title": "Aide-mémoire Python",
    "section": "Plusieurs listes en même temps",
    "text": "Plusieurs listes en même temps\nS’il est nécessaire de traiter deux (ou plus) listes en même temps dans une boucle, il est possible d’utiliser la fonction zip().\nlistA = [\"pomme\", \"poire\", \"pêche\"]\nlistB = [2, 5, 1]\n\nfor val1, val2 in zip(listA, listB):\n    print(val2, '\\t',  val1)\n\n# 2        pomme\n# 5        poire\n# 1        pêche"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QUARTO_grimmoire_job",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Job Blog",
    "section": "",
<<<<<<< HEAD
    "text": "École d’été - Analyses et visualisation en Python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTableau de bord - Richesse spécifique\n\n\n\nEBV\n\n\ntableau de bord\n\n\n\nPremière étape de production d’un tableau de bord\n\n\n\nClaire-Cécile Juhasz\n\n\nMay 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProjet EBVs\n\n\n\nEBV\n\n\nindicateurs\n\n\n\nDescription et définition des objectifs du projet\n\n\n\nClaire-Cécile Juhasz\n\n\nMay 6, 2024\n\n\n\n\n\n\n\n\nNo matching items"
=======
    "text": "Workflow pour production EBV richesse spécifique\n\n\n\nEBV\n\n\n\nÀ partir des données brutes\n\n\n\nClaire-Cécile Juhasz\n\n\nMay 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTableau de bord - Richesse spécifique\n\n\n\nEBV\n\n\ntableau de bord\n\n\n\nPremière étape de production d’un tableau de bord\n\n\n\nClaire-Cécile Juhasz\n\n\nMay 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProjet EBVs\n\n\n\nEBV\n\n\nindicateurs\n\n\n\nDescription et définition des objectifs du projet\n\n\n\nClaire-Cécile Juhasz\n\n\nMay 6, 2024\n\n\n\n\n\n\n\n\nNo matching items"
>>>>>>> 16c9dd9325bcb40fa60671ca8398f503ffe725f5
  },
  {
    "objectID": "posts/2024-05-06_post/index.html",
    "href": "posts/2024-05-06_post/index.html",
    "title": "Projet EBVs",
    "section": "",
    "text": "L’objectif est de développer les EBVs superficie des aires de distribution des espèces et richesse spécifique à partir des résultats de Species Distribution models. Les EBVs doivent ensuite être organisées sous le format d’un cube avec les trois axes correspondant (idéalement) aux taxons, l’espace et le temps."
  },
  {
    "objectID": "posts/2024-05-06_post2/index.html",
    "href": "posts/2024-05-06_post2/index.html",
    "title": "Tableau de bord - Richesse spécifique",
    "section": "",
    "text": "Un premier tableau de bord  a été développé à partir: - des données brutes utilisées par Vincent Bellavance pour ses modèles de distribution (INLA). Ces données, issues d’Atlas ne concernent que les oiseaux nicheurs du Québec entre 1990 et 2019. - la richesse spécifique a été obtenue pour différentes échelles spatiales: provinces naturelles, régions naturelles, niveaux physiogéographiques, districts écologiques et pixels 10x10 km.\nUne version de cartes de richesse spécifique ont été obtenue également à partir des carte de distribution de Vincent Bellavance pour l’années 2017."
  },
  {
    "objectID": "posts/2024-05-06_post/index.html#ressources-dintérêt",
    "href": "posts/2024-05-06_post/index.html#ressources-dintérêt",
    "title": "Projet EBVs",
    "section": "Ressources d’intérêt",
    "text": "Ressources d’intérêt\n\nprésentation sur les EBVs de Louis Quénée (chargé de mission à PatriNat - 2023)\n\n\n\nCf mendeley library"
  },
  {
<<<<<<< HEAD
    "objectID": "posts/2024_05_21/index.html",
    "href": "posts/2024_05_21/index.html",
    "title": "École d’été - Analyses et visualisation en Python",
    "section": "",
    "text": "création compte sur Jupyterhub (voir projet Jupyter & documentation about Jupyter) - JupyterLab permet la création d’un notebook (comme rmarkdown)\nprésentation & mot de bienvenue par Charles - Canal Slack #analyse-de-données\n\n\n\nCarpentry formation\nExercices dans JupyterHub\ncheat sheet interactive pour les commandes bash –&gt; tldr pages ou devhints mais on peut aussi utiliser command --help ou man command\nprompt = invite de commande - donne le nom de usager et le nom de la machine (ici nodex)\nshell = faite pour entourée le noyau de l’ordinateur et le protéger. On ne communique pas diretement avec le noyau, mais on passe par le shell\nIl existe plusieurs formes de shells pour Unix (cornshell, zshell, cshell, zshrc, …), mais bash étant le plus répandu. The bash shell is written in C.\nListe de commandes à connaître:\nStructure classique d’une commande command -options argument\n\n\n\n\n\n\n\n\n\ncommand\nfunction\nremarq\n\n\n\n\npwd\naffiche le répertoire dans lequel on se trouve actuellement\npremier slash / correspd à la racine d’où partent tous les répertoires - pwd for path working directory \n\n\nctl + l or clear\nnettoyer l’écran\n\n\n\nls -F\naffiche le contenu du repo dans lequel on se trouve\nfor list - -F pour discerner repo & files, -h montre la taille des fichiers lisibles par l’humain, -l for long list (contient plus d’informations), -t tri par date, -S tri par taille de fichier\n\n\ncd\nnavigation dans un autre repo\nfor change directory, commande relative au répertoire actuelle, utiliser cd .. pour revenir un niveau au dessus de là où je me trouve, cd sans argument fait repartir dans le répertoire personnel /home/user/, cd peut aussi être utilisé avec un absolute path, cd ~/project/ avec le tild qui permet de référer au repo personnel et cd . correspond au répertoire actuel, cd / dirige vers la racine de tous les fichiers\n\n\nTAB completion\npour compléter à partir de la/les premières lettres des fichiers/dossiers présents dans le repo\n\n\n\nmkdir folderName\ncréation d’un répertoire\nfor make directory - éeviter les espaces dans les noms de files and folders (sinon création de deux fichiers ou repo), pas d’accents non plus ou caractères spéciaux\n\n\nrm -r\neffece un fichier/dossier\n-r is for recurssive (pour les dossiers) ce qui permet de descendre dans le repo, effacer tous les fichiers puis effacer le dossier parent, -f pour forcer l’effacement, -i pour demander (interroger) si on est sûr de remove\n\n\nnano ou touch\ncréation d’un fichier\néquivalent d’éditeur de texte, plus efficace à utiliser sont vim ou emacs si on utilise beaucoup le shell, avec touch créé un fichier complètement vide utilisé pour des logiciels qui ont besoin d’un fichier déjà existant pour écrire les résultats\n\n\nwhich\nlocalise les fichiers binaires\n\n\n\nmv lastNAme.txt newName.txt\nrenomme un fichier ou déplace un fichier\nfor move si on ajoute un absolute path dans la deuxième partie de commande ex: mv new_work.txt ~/\n\n\ncp source cible\ncopie un fichier\npossible de donner un nouveau nom au fichier copier et de le changer de repo, utiliser -r si la source est un repo, la source peut être multiple, l’essentiel étant que le dernier dossier soit la cible\n\n\n&&\nsépare deux commandes que l’on souhaite excécuter successivement\ns’excecute sous condition que la première fonctionne, ; peut aussi être utilisé à la place du double esperluette &&\n\n\n*\nwildcart (caractère générique) permettant un pattern matching\npeu importe le nombre de caractère\n\n\n?\nremplace un seul caractère\n\n\n\ncat\nvoir le contenu d’un fichier texte\n\n\n\nwc\naffiche nb lignes, nb mots et nb caractères\nfor word count, ex: wc *.txt applique la commande sur tous les fichiers txt et fait la somme, -l donne uniquement le nombre de lignes\n\n\n&gt; fileName\nredire la sortie de commande vers un fichier\n\n\n\n^c\npour annuler\n\n\n\nsort\ntri sur la prmière colonne d’un fichier\n-n pour numérique, -k qui permet de choisir sur quelle colonne triée\n\n\nhead\nrécupère les premières lignes d’un fichier\n-n permet de spécifier le nombre de ligne que l’on souhaite extraire\n\n\n\\|\npipe\ndans une succession de commande, permet d’utiliser la sortie de la première commande pour excécuter la deuxième et ainsi de suite\n\n\n\nExemple du pipe - Représente la puissance de l’utilisation du unix shell\n\n==&gt; parcourir la suite de la formation de Carpentry\n\n\n\n\nCIP = Calcul informatique de pointe tt calcul qui fait utilisation intensive de ress. info. ou qui est limité par la ressource dispo (ex. CPU, GPU, mémoire, stockage, temps)\nObj. calcul Qc = Fournir au milieu universitR des envir, informatiq et des expertises pour la recherche\nMonarque = ordinateur quantique\nÀ disponibilité: grappes de calcul, espace info-nuagiques (hébergement de site internet par exemple) et stockage de data\nVoir la documentation\nVoir les notebooks pour de la formation Alliance de recherche numérique chapote à l’échelle nationale (grand coordonnateur) \nCalcul Québec est une antenne de l’alliance.\nQuelle grappe choisir ?\n\ncelle déjà utilisée par le labo\ncelle physiquement présente au plus proche (béluga, narval)\ncelle qui correspond à nos besoins (gna)\n\nPour la suite, cf la présentation\nPremière étape après la connexion SSH, arrivé sur un noeud de connexion qui donne accès aux noeuds de calcul. Le noeud de login (qui peut être utilisé pour la session interactive) a accès à internet mais pas les noeuds de calcul. À partir du noeud de login, accès aux différents dossiers, chargement des fichiers nécessaires. Sur les grappes, sauvegarde automatique pour les espaces home (donc si fausse manip avec rm, moyen de les récupérer). Sur le noeud de connexion, possible d’utiliser git (clone) via git-lfs pour large file system qui permet d’associer et stocker des jeux de données à un répertoire git (outil complémentaire qui peut être utiliser dans le souci de reproductibilité et transparence). Pour aller chercher les données en ligne: wget, curl, python, git-lfs.\n\n\nmodule spider &lt;mot clé&gt;  # recherche par mot clé\nmodule avail [module]    # disponible\nmodule load &lt;module&gt;     # charger un module\nmodule unload &lt;module&gt;   # décharger un module\nmodule list              # afficher les modules activés\nmodule purge             # Revenir à l’état d’origine\n💥 ATTENTION ! Ne pas utiliser conda (problématique pour les grappes)\n💡 En utilisant module spider r/4.4.0, permet de voir quelles dépendances sont nécessaires.\n💡 Bonne pratique: toujours préciser la version des modules que l’on charge.\n💡 module spider nom_paquet fait du fuzzy matching et va sortir la liste des modules qui contiennent le nom du paquet. Si plusieurs et difficile de choisir à partir de la description, utiliser le wiki ! 😀\n\n\n\nRessources utilisées dépendent su type de tâche\n\nséquencielle - un seul coeur, sur un seul noeud - tâches qui s’excecutent les unes après les autres\nen parallèle qui utilise plusieurs coeurs potentiellement sur plusieurs noeuds - il en existe de deux types: de données et de tâches. Parall. de données est par ex, des tâches séquentielles sur plusieurs jeux de données en même temps. Parall. de tâches est par ex. un logiciel qui est capable d’effectuer plusieurs tâches en parall. sur un même jeux de données (assez rare dans certains domaines conne les sciences de la vie, mais souvent retrouvé en astro-physique par ex).\nordonnanceur - slurm dispatche toutes les tâches dans les noeuds de calcul.\n\n💡 utiliser seff &lt;jobID&gt; pour voir si la demande de ressource est optimale. Car si non optimisé, crédit au profil et les tâches vont partir moins rapidement. Cependant, reset aux deux - trois semaines. Les prioritées sont indépendantes d’une grappe à l’autre, càd entre Beluga, Narval, … sshare et htop pour voir l’état de priorité quand la tâche est lancée.\n\ntoutes les grappes ont des limites de ressources. Par ex. pour 🐬Narval\n\n💡 GPU carte pour accélérer et nécessaire que pour certains logiciels (dans l’IA par ex), pas nécessaire pour R qui peut utiliser simplement des CPU\n\n\n\nLa soumission est faite sous la forme d’un fichier bash.\n#!/bin/bash  #ligne obligatoire\n\n#SBATCH --nodes=1 [1]\n#SBATCH --cpus-per-task=1 [1]\n#SBATCH --mem-per-cpu=1G [256M]\n#SBATCH --time=3:00:00 [1:00:00]\n\n#SBATCH --account=def-&lt;sponsor&gt;\n\nbash script\nEntre crochet = valeur par défaut\nAller voir Running_jobs dans le wiki\ncf diapo 57 de la présentation\n\n\n\n\nsrun --jobid xxxx --pty htop -u $USER pour avoir accès au CPU en direct pendant que la tâche est en cours\nPossible aussi d’utiliser le portail, pour 🐬Narval\n💡 Prévoir un peu de ressources en plus pour le temps et la mémoire.\n💡 Commandes utiles - cf diapo 59 (sbatch, squeue, scancel, seff, sacct)\n\n\n\ncf diapo 69"
  },
  {
    "objectID": "posts/2024_05_21/index.html#day-1",
    "href": "posts/2024_05_21/index.html#day-1",
    "title": "École d’été - Analyses et visualisation en Python",
    "section": "",
    "text": "création compte sur Jupyterhub (voir projet Jupyter & documentation about Jupyter) - JupyterLab permet la création d’un notebook (comme rmarkdown)\nprésentation & mot de bienvenue par Charles - Canal Slack #analyse-de-données\n\n\n\nCarpentry formation\nExercices dans JupyterHub\ncheat sheet interactive pour les commandes bash –&gt; tldr pages ou devhints mais on peut aussi utiliser command --help ou man command\nprompt = invite de commande - donne le nom de usager et le nom de la machine (ici nodex)\nshell = faite pour entourée le noyau de l’ordinateur et le protéger. On ne communique pas diretement avec le noyau, mais on passe par le shell\nIl existe plusieurs formes de shells pour Unix (cornshell, zshell, cshell, zshrc, …), mais bash étant le plus répandu. The bash shell is written in C.\nListe de commandes à connaître:\nStructure classique d’une commande command -options argument\n\n\n\n\n\n\n\n\n\ncommand\nfunction\nremarq\n\n\n\n\npwd\naffiche le répertoire dans lequel on se trouve actuellement\npremier slash / correspd à la racine d’où partent tous les répertoires - pwd for path working directory \n\n\nctl + l or clear\nnettoyer l’écran\n\n\n\nls -F\naffiche le contenu du repo dans lequel on se trouve\nfor list - -F pour discerner repo & files, -h montre la taille des fichiers lisibles par l’humain, -l for long list (contient plus d’informations), -t tri par date, -S tri par taille de fichier\n\n\ncd\nnavigation dans un autre repo\nfor change directory, commande relative au répertoire actuelle, utiliser cd .. pour revenir un niveau au dessus de là où je me trouve, cd sans argument fait repartir dans le répertoire personnel /home/user/, cd peut aussi être utilisé avec un absolute path, cd ~/project/ avec le tild qui permet de référer au repo personnel et cd . correspond au répertoire actuel, cd / dirige vers la racine de tous les fichiers\n\n\nTAB completion\npour compléter à partir de la/les premières lettres des fichiers/dossiers présents dans le repo\n\n\n\nmkdir folderName\ncréation d’un répertoire\nfor make directory - éeviter les espaces dans les noms de files and folders (sinon création de deux fichiers ou repo), pas d’accents non plus ou caractères spéciaux\n\n\nrm -r\neffece un fichier/dossier\n-r is for recurssive (pour les dossiers) ce qui permet de descendre dans le repo, effacer tous les fichiers puis effacer le dossier parent, -f pour forcer l’effacement, -i pour demander (interroger) si on est sûr de remove\n\n\nnano ou touch\ncréation d’un fichier\néquivalent d’éditeur de texte, plus efficace à utiliser sont vim ou emacs si on utilise beaucoup le shell, avec touch créé un fichier complètement vide utilisé pour des logiciels qui ont besoin d’un fichier déjà existant pour écrire les résultats\n\n\nwhich\nlocalise les fichiers binaires\n\n\n\nmv lastNAme.txt newName.txt\nrenomme un fichier ou déplace un fichier\nfor move si on ajoute un absolute path dans la deuxième partie de commande ex: mv new_work.txt ~/\n\n\ncp source cible\ncopie un fichier\npossible de donner un nouveau nom au fichier copier et de le changer de repo, utiliser -r si la source est un repo, la source peut être multiple, l’essentiel étant que le dernier dossier soit la cible\n\n\n&&\nsépare deux commandes que l’on souhaite excécuter successivement\ns’excecute sous condition que la première fonctionne, ; peut aussi être utilisé à la place du double esperluette &&\n\n\n*\nwildcart (caractère générique) permettant un pattern matching\npeu importe le nombre de caractère\n\n\n?\nremplace un seul caractère\n\n\n\ncat\nvoir le contenu d’un fichier texte\n\n\n\nwc\naffiche nb lignes, nb mots et nb caractères\nfor word count, ex: wc *.txt applique la commande sur tous les fichiers txt et fait la somme, -l donne uniquement le nombre de lignes\n\n\n&gt; fileName\nredire la sortie de commande vers un fichier\n\n\n\n^c\npour annuler\n\n\n\nsort\ntri sur la prmière colonne d’un fichier\n-n pour numérique, -k qui permet de choisir sur quelle colonne triée\n\n\nhead\nrécupère les premières lignes d’un fichier\n-n permet de spécifier le nombre de ligne que l’on souhaite extraire\n\n\n\\|\npipe\ndans une succession de commande, permet d’utiliser la sortie de la première commande pour excécuter la deuxième et ainsi de suite\n\n\n\nExemple du pipe - Représente la puissance de l’utilisation du unix shell\n\n==&gt; parcourir la suite de la formation de Carpentry\n\n\n\n\nCIP = Calcul informatique de pointe tt calcul qui fait utilisation intensive de ress. info. ou qui est limité par la ressource dispo (ex. CPU, GPU, mémoire, stockage, temps)\nObj. calcul Qc = Fournir au milieu universitR des envir, informatiq et des expertises pour la recherche\nMonarque = ordinateur quantique\nÀ disponibilité: grappes de calcul, espace info-nuagiques (hébergement de site internet par exemple) et stockage de data\nVoir la documentation\nVoir les notebooks pour de la formation Alliance de recherche numérique chapote à l’échelle nationale (grand coordonnateur) \nCalcul Québec est une antenne de l’alliance.\nQuelle grappe choisir ?\n\ncelle déjà utilisée par le labo\ncelle physiquement présente au plus proche (béluga, narval)\ncelle qui correspond à nos besoins (gna)\n\nPour la suite, cf la présentation\nPremière étape après la connexion SSH, arrivé sur un noeud de connexion qui donne accès aux noeuds de calcul. Le noeud de login (qui peut être utilisé pour la session interactive) a accès à internet mais pas les noeuds de calcul. À partir du noeud de login, accès aux différents dossiers, chargement des fichiers nécessaires. Sur les grappes, sauvegarde automatique pour les espaces home (donc si fausse manip avec rm, moyen de les récupérer). Sur le noeud de connexion, possible d’utiliser git (clone) via git-lfs pour large file system qui permet d’associer et stocker des jeux de données à un répertoire git (outil complémentaire qui peut être utiliser dans le souci de reproductibilité et transparence). Pour aller chercher les données en ligne: wget, curl, python, git-lfs.\n\n\nmodule spider &lt;mot clé&gt;  # recherche par mot clé\nmodule avail [module]    # disponible\nmodule load &lt;module&gt;     # charger un module\nmodule unload &lt;module&gt;   # décharger un module\nmodule list              # afficher les modules activés\nmodule purge             # Revenir à l’état d’origine\n💥 ATTENTION ! Ne pas utiliser conda (problématique pour les grappes)\n💡 En utilisant module spider r/4.4.0, permet de voir quelles dépendances sont nécessaires.\n💡 Bonne pratique: toujours préciser la version des modules que l’on charge.\n💡 module spider nom_paquet fait du fuzzy matching et va sortir la liste des modules qui contiennent le nom du paquet. Si plusieurs et difficile de choisir à partir de la description, utiliser le wiki ! 😀\n\n\n\nRessources utilisées dépendent su type de tâche\n\nséquencielle - un seul coeur, sur un seul noeud - tâches qui s’excecutent les unes après les autres\nen parallèle qui utilise plusieurs coeurs potentiellement sur plusieurs noeuds - il en existe de deux types: de données et de tâches. Parall. de données est par ex, des tâches séquentielles sur plusieurs jeux de données en même temps. Parall. de tâches est par ex. un logiciel qui est capable d’effectuer plusieurs tâches en parall. sur un même jeux de données (assez rare dans certains domaines conne les sciences de la vie, mais souvent retrouvé en astro-physique par ex).\nordonnanceur - slurm dispatche toutes les tâches dans les noeuds de calcul.\n\n💡 utiliser seff &lt;jobID&gt; pour voir si la demande de ressource est optimale. Car si non optimisé, crédit au profil et les tâches vont partir moins rapidement. Cependant, reset aux deux - trois semaines. Les prioritées sont indépendantes d’une grappe à l’autre, càd entre Beluga, Narval, … sshare et htop pour voir l’état de priorité quand la tâche est lancée.\n\ntoutes les grappes ont des limites de ressources. Par ex. pour 🐬Narval\n\n💡 GPU carte pour accélérer et nécessaire que pour certains logiciels (dans l’IA par ex), pas nécessaire pour R qui peut utiliser simplement des CPU\n\n\n\nLa soumission est faite sous la forme d’un fichier bash.\n#!/bin/bash  #ligne obligatoire\n\n#SBATCH --nodes=1 [1]\n#SBATCH --cpus-per-task=1 [1]\n#SBATCH --mem-per-cpu=1G [256M]\n#SBATCH --time=3:00:00 [1:00:00]\n\n#SBATCH --account=def-&lt;sponsor&gt;\n\nbash script\nEntre crochet = valeur par défaut\nAller voir Running_jobs dans le wiki\ncf diapo 57 de la présentation\n\n\n\n\nsrun --jobid xxxx --pty htop -u $USER pour avoir accès au CPU en direct pendant que la tâche est en cours\nPossible aussi d’utiliser le portail, pour 🐬Narval\n💡 Prévoir un peu de ressources en plus pour le temps et la mémoire.\n💡 Commandes utiles - cf diapo 59 (sbatch, squeue, scancel, seff, sacct)\n\n\n\ncf diapo 69"
=======
    "objectID": "posts/2024-05-10_post/index.html",
    "href": "posts/2024-05-10_post/index.html",
    "title": "Workflow pour production EBV richesse spécifique",
    "section": "",
    "text": "Ressources nécessaires\n\nduckdb & duckdbfs: packages R qui permettent d’ouvrir et de manipuler les fichiers geoparquets\nduckdb_spatial - package en cours de développement - l’objectif est de travailler avec les données spatiales basées sur le modèle “Simple Feature Geometry”\nebvcube: package R pour manipuler les EBVs stockées sous le format netCDF dans le portail d’EBVs de GEOBON.\n\n\n\nÉtapes de réflexion\n\npenser en terme de production de métrique (ici la richesse spécifique) à une résolution la plus fine possible. Le choix de cette résolution va dépendre de la précision des données. Cette précision va varier en fonction la data utilisées (par ex. occurrences brutes avec précision associées ou probabilité d’occurrence des modèles de distribution des espèces)\npenser à l’optimisation de l’extraction de l’information d’Atlas sous format geoparquet avec des polygones storés dans un format geopackage - cf vignette de duckdbfs (extraction des points puis mutate() en objet sf –&gt; voir le délai et si optimisable)\ncréation d’un netCDF pour le résultat et pour le partage sur le portail de GEOBON - penser si nécessaire d’avoir un autre format plus efficace"
>>>>>>> 16c9dd9325bcb40fa60671ca8398f503ffe725f5
  }
]