---
title: "Bash, grappes de calcul, analyse et visualisation en Python"
description: "√âcole printemps Calcul Qu√©bec - Bases de bash et grappes de calcul"
author:
  - name: Claire-C√©cile Juhasz 
date: 05-21-2024
categories: [formation, √©cole √©t√©] # self-defined categories
image: https://ofy.org/wp-content/uploads/2015/11/OFY-learning-to-learn-cover-photo.jpg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

# √âcole d'√©t√© - Analyses et visualisation en Python

## Mardi 21 mai 2024

![](https://jupyter.org/assets/logos/rectanglelogo-greytext-orangebody-greymoons.svg)

- cr√©ation compte sur [Jupyterhub](https://jupyter.a-ecole.calculquebec.cloud/hub/login) (voir projet [Jupyter](https://jupyter.org/) & [documentation](https://docs.jupyter.org/en/latest/) about Jupyter) - JupyterLab permet la cr√©ation d'un notebook (comme rmarkdown)
- pr√©sentation & mot de bienvenue par Charles - Canal Slack #analyse-de-donn√©es

### Formation 1 - Daniel - The Unix shell

[Carpentry formation](https://swcarpentry.github.io/shell-novice/)

Exercices dans JupyterHub  
cheat sheet interactive pour les commandes bash --> [tldr pages](https://tldr.sh/) ou [devhints](https://devhints.io/bash) mais on peut aussi utiliser `command --help` ou `man command`

prompt = invite de commande - donne le nom de usager et le nom de la machine (ici `nodex`)  
shell = faite pour entour√©e le noyau de l'ordinateur et le prot√©ger. On ne communique pas diretement avec le noyau, mais on passe par le shell  
Il existe plusieurs formes de shells pour Unix (cornshell, zshell, cshell, zshrc, ...), mais bash √©tant le plus r√©pandu. The bash shell is written in C.

Liste de commandes √† conna√Ætre:

Structure classique d'une commande `command -options argument`  
![](https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg)  

| command | function | remarq |
| -------------------- | ----------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `pwd` | affiche le r√©pertoire dans lequel on se trouve actuellement | premier slash `/` correspd √† la racine d'o√π partent tous les r√©pertoires - pwd for <u>path working directory </u> |
| `ctl + l` or `clear` | nettoyer l'√©cran | |
| `ls -F` | affiche le contenu du repo dans lequel on se trouve | for list - `-F` pour discerner repo & files, `-h` montre la taille des fichiers lisibles par l'humain, `-l` for long list (contient plus d'informations), `-t` tri par date, `-S` tri par taille de fichier |
| `cd` | navigation dans un autre repo | for change directory, commande **relative** au r√©pertoire actuelle, utiliser `cd ..` pour revenir un niveau au dessus de l√† o√π je me trouve, `cd sans argument` fait repartir dans le r√©pertoire personnel `/home/user/`, `cd` peut aussi √™tre utilis√© avec un absolute path, `cd ~/project/` avec le tild qui permet de r√©f√©rer au repo personnel et `cd .` correspond au r√©pertoire actuel, `cd /` dirige vers la racine de tous les fichiers |
| `TAB completion` | pour compl√©ter √† partir de la/les premi√®res lettres des fichiers/dossiers pr√©sents dans le repo | |
|`mkdir folderName`|cr√©ation d'un r√©pertoire| for make directory - √©eviter les espaces dans les noms de files and folders (sinon cr√©ation de deux fichiers ou repo), pas d'accents non plus ou caract√®res sp√©ciaux|
|`rm -r`|effece un fichier/dossier |`-r` is for recurssive (pour les dossiers) ce qui permet de descendre dans le repo, effacer tous les fichiers puis effacer le dossier parent, `-f` pour forcer l'effacement, `-i` pour demander (interroger) si on est s√ªr de remove|
|`nano` ou `touch`|cr√©ation d'un fichier|√©quivalent d'√©diteur de texte, plus efficace √† utiliser sont `vim` ou `emacs` si on utilise beaucoup le shell, avec `touch` cr√©√© un fichier compl√®tement vide utilis√© pour des logiciels qui ont besoin d'un fichier d√©j√† existant pour √©crire les r√©sultats|
|`which`|localise les fichiers binaires||
|`mv lastNAme.txt newName.txt`|renomme un fichier ou d√©place un fichier|for move si on ajoute un absolute path dans la deuxi√®me partie de commande ex: `mv new_work.txt ~/`|
|`cp source cible`|copie un fichier|possible de donner un nouveau nom au fichier copier et de le changer de repo, utiliser `-r` si la source est un repo, la `source` peut √™tre multiple, l'essentiel √©tant que le dernier dossier soit la `cible` |
|`&&`| s√©pare deux commandes que l'on souhaite exc√©cuter successivement|s'excecute sous condition que la premi√®re fonctionne, `;` peut aussi √™tre utilis√© √† la place du double esperluette `&&`|
|`*`|wildcart (caract√®re g√©n√©rique) permettant un pattern matching|peu importe le nombre de caract√®re|
|`?`|remplace un seul caract√®re||
|`cat`|voir le contenu d'un fichier texte||
|`wc`|affiche nb lignes, nb mots et nb caract√®res|for word count, ex: `wc *.txt` applique la commande sur tous les fichiers txt et fait la somme, `-l` donne uniquement le nombre de lignes|
|`> fileName`|redire la sortie de commande vers un fichier||
|`^c`|pour annuler||
|`sort`|tri sur la prmi√®re colonne d'un fichier|`-n` pour num√©rique, `-k` qui permet de choisir sur quelle colonne tri√©e|
|`head`|r√©cup√®re les premi√®res lignes d'un fichier|`-n` permet de sp√©cifier le nombre de ligne que l'on souhaite extraire|
|`\|`|pipe|dans une succession de commande, permet d'utiliser la sortie de la premi√®re commande pour exc√©cuter la deuxi√®me et ainsi de suite|

<u>Exemple du pipe - Repr√©sente la puissance de l'utilisation du unix shell</u>  
![](https://swcarpentry.github.io/shell-novice/fig/redirects-and-pipes.svg)

==> parcourir la suite de la formation de Carpentry

### Formation 2 - H√©l√®ne Gingras - Premiers pas sur les grappes de calcul

![](https://www.calculquebec.ca/wp-content/uploads/2021/11/Narvalcouleurlogocq.png)

CIP = Calcul informatique de pointe tt calcul qui fait utilisation intensive de ress. info. ou qui est limit√© par la ressource dispo (ex. CPU, GPU, m√©moire, stockage,¬†temps)

Obj. calcul Qc = Fournir au milieu universitR des envir, informatiq et des expertises pour la recherche

**Monarque** = ordinateur quantique

√Ä disponibilit√©: grappes de calcul, espace info-nuagiques (h√©bergement de site internet par exemple) et stockage de data  
Voir la [documentation](https://docs.alliancecan.ca/wiki/Technical_documentation)  
Voir les notebooks pour de la formation
[Alliance de recherche num√©rique](https://alliancecan.ca/fr) chapote √† l'√©chelle nationale (grand coordonnateur)
![](https://alliancecan.ca/themes/custom/site_theme/images/alliance_logo_french-first.svg)

[Calcul Qu√©bec](https://www.calculquebec.ca/) est une antenne de l'alliance.

Quelle grappe choisir ?

- celle d√©j√† utilis√©e par le labo
- celle physiquement pr√©sente au plus proche (b√©luga, narval)
- celle qui correspond √† nos besoins (gna)

Pour la suite, cf la [pr√©sentation](https://drive.google.com/drive/folders/17rGmHm-AeM1WnkczDVTd12CZnAprddU4)  
Premi√®re √©tape apr√®s la connexion SSH, arriv√© sur un noeud de connexion qui donne acc√®s aux noeuds de calcul. Le noeud de login (qui peut √™tre utilis√© pour la session interactive) a acc√®s √† internet mais pas les noeuds de calcul. √Ä partir du noeud de login, acc√®s aux diff√©rents dossiers, chargement des fichiers n√©cessaires. Sur les grappes, sauvegarde automatique pour les espaces home (donc si fausse manip avec `rm`, moyen de les r√©cup√©rer). Sur le noeud de connexion, possible d'utiliser `git (clone)` via `git-lfs` pour large file system qui permet d'associer et stocker des jeux de donn√©es √† un r√©pertoire git (outil compl√©mentaire qui peut √™tre utiliser dans le souci de reproductibilit√© et transparence). Pour aller chercher les donn√©es en ligne: `wget`, `curl`, `python`, `git-lfs`.

#### <u>Les modules</u> pour cr√©er son environnement

```bash
module spider <mot cl√©>  # recherche par mot cl√©
module avail [module]    # disponible
module load <module>     # charger un module
module unload <module>   # d√©charger un module
module list              # afficher les modules activ√©s
module purge             # Revenir √† l‚Äô√©tat d‚Äôorigine
```

üí• ATTENTION ! Ne pas utiliser `conda` (probl√©matique pour les grappes)

üí° En utilisant `module spider r/4.4.0`, permet de voir quelles d√©pendances sont n√©cessaires.  
üí° Bonne pratique: toujours pr√©ciser la version des modules que l'on charge.  
üí° `module spider nom_paquet` fait du fuzzy matching et va sortir la liste des modules qui contiennent le nom du paquet. Si plusieurs et difficile de choisir √† partir de la description, utiliser le wiki ! üòÄ
üí° `thread` = nombre de coeurs. Utile pour certains logiciel dont le param√©trage n√©cessite une valeur pour thread et nom pas un nombre de coeur  
üí° Pour voir la liste des variables environnement ----> [Slurm](https://docs.hpc.shef.ac.uk/en/latest/referenceinfo/scheduler/SLURM/SLURM-environment-variables.html#gsc.tab=0)

#### <u>Exc√©cution des t√¢ches</u>

Ressources utilis√©es d√©pendent su type de t√¢che

- s√©quencielle - un seul coeur, sur un seul noeud - t√¢ches qui s'excecutent les unes apr√®s les autres
- en parall√®le qui utilise plusieurs coeurs potentiellement sur plusieurs noeuds - il en existe de deux types: de **donn√©es** et de **t√¢ches**. **Parall. de donn√©es** est par ex, des t√¢ches s√©quentielles sur plusieurs jeux de donn√©es en m√™me temps. **Parall. de t√¢ches** est par ex. un logiciel qui est capable d'effectuer plusieurs t√¢ches en parall. sur un m√™me jeux de donn√©es (assez rare dans certains domaines conne les sciences de la vie, mais souvent retrouv√© en astro-physique par ex).
- **ordonnanceur** - [`slurm`](https://slurm.schedmd.com/) dispatche toutes les t√¢ches dans les noeuds de calcul - cf liste de [commandes de slurm](https://slurm.schedmd.com/man_index.html)  
  ![](https://slurm.schedmd.com/slurm_logo.png)

üí° utiliser `seff <jobID>` pour voir si la demande de ressource est optimale. Car si non optimis√©, cr√©dit au profil et les t√¢ches vont partir moins rapidement. Cependant, reset aux deux - trois semaines. Les priorit√©es sont ind√©pendantes d'une grappe √† l'autre, c√†d entre Beluga, Narval, ... `sshare` et `htop` pour voir l'√©tat de priorit√© quand la t√¢che est lanc√©e.

- toutes les grappes ont des limites de ressources. Par ex. pour üê¨[Narval](https://docs.alliancecan.ca/wiki/Narval/en)

üí° GPU carte pour acc√©l√©rer et n√©cessaire que pour certains logiciels (dans l'IA par ex), pas n√©cessaire pour R qui peut utiliser simplement des CPU

#### <u>Soumission des t√¢ches</u>

La soumission est faite sous la forme d'un fichier bash.

```bash
#!/bin/bash  #ligne obligatoire

#SBATCH --nodes=1 [1]
#SBATCH --cpus-per-task=1 [1]
#SBATCH --mem-per-cpu=1G [256M]
#SBATCH --time=3:00:00 [1:00:00]

#SBATCH --account=def-<sponsor>

bash script
```

Entre crochet = valeur par d√©faut

Aller voir [**Running_jobs**](https://docs.alliancecan.ca/wiki/Running_jobs) dans le wiki

cf diapo 57 de la pr√©sentation

<img src="sbash_file.png" width=70%>

#### <u>Suivi des t√¢ches</u>

`srun --jobid xxxx --pty htop -u $USER` pour avoir acc√®s au CPU en direct pendant que la t√¢che est en cours  
Possible aussi d'utiliser le portail, pour üê¨[Narval](https://portail.narval.calculquebec.ca/)

üí° Pr√©voir un peu de ressources en plus pour le temps et la m√©moire.  
üí° Commandes utiles - cf diapo 59 (`sbatch`, `squeue`, `scancel`, `seff`, `sacct`)

#### Outils int√©ressants pour les t√¢ches en parall√®le

- [GLOST](https://docs.alliancecan.ca/wiki/GLOST)
- [META-FARM](https://docs.alliancecan.ca/wiki/META-Farm) qui peut aider pour g√©rer les t√¢ches qui ont √©chou√© (les relancer par exemple)
- Charles conseille de pr√©f√©rer [GNU parallel](https://docs.alliancecan.ca/wiki/GNU_Parallel) !

#### <u>Espaces de stockage disponible</u>

cf diapo 69

## Mercredi 22 mai 2024

### Formation 1 - Caroline Baril - Introduction √† la gestion de donn√©es de recherche (GDR)

Responsable de la mise en place d'un programme de gestion de donn√©es  
Donn√©es de recherche extra vari√©es avec des volumes pouvant √™tre tr√®s important. Multiplicit√© des formats de fichiers pour un type de donn√©es, ce qui repr√©sente un vrai challenge.

#### Cycle de vie des donn√©es

<img src="https://science-ouverte.univ-artois.fr/wp-content/uploads/2022/06/cycle.png" width=50%>  

cf diapo 5  
Pour chaque √©tape, d√©fi de stockage et archivage. Il existe plusieurs <u>phases actives</u> dans ce cycle de vie

#### Principe FAIR

![](https://grapheast.hypotheses.org/files/2021/12/FAIR-data-500x299.png)

Les avantages d'une bonne gestion = favorise une recherche efficace et reproductible(!), r√©duit le co√ªt de la recherche en temps et en argent (√©vite la redondance), favorise visibilit√© et impacte de la recherche et facilite science ouverte et transparente.

#### GDR en pratique

<img src="GDR_pratiques.png" width=100%>

### Formation 2 - Lina Harper - Nettoyage des donn√©es avec OpenRefine

[<img src=https://openrefine.org/img/openrefine_logo.svg width='15%'>](https://openrefine.org) Voir √©galement la formation de [Software Carpentry](https://librarycarpentry.org/lc-open-refine/01-introduction.html)

<img src="nettoyage_donnees.png" width=100%>

OpenRefine est un outil open-source, gratuit, ouvert avec UI simple et intuitif. Il supporte nombreux type de fichiers, traitement des doublons, r√©conciliation de plusieurs jeux de donn√©es, ... et enrichissement des donn√©es via des requ√™tes √† des APIs. Le langage de prog utilis√© est GREL.

#### Pratique

Acc√®s √† openRefine via JupiterLab. Aller sur l'onglet software, chercher OpenRefine et le loader. Si il n'est pas pr√©sent, loader StdEnv
2020 d'Abord.

Source des donn√©es: [Montr√©al donn√©es ouvertes](https://donnees.montreal.ca/dataset/declarations-exterminations-punaises-de-lit)

## Jeudi 23 mai 2024

<u>Pour les ressources, voir [intro Python](https://github.com/ccoulombe/cq-intro-python) & [analyse et visualisation Python](https://github.com/calculquebec/analyse-donnees-python)</u>

### Formation 1 - Charles - Introduction √† Python

<u>GLOBALEMENT, FAIRE TR√àS ATTENTION AUX SUBTILIT√âS SUR L'INDENTATIONS</u>

- pr√©sentation de Jupyter lab
- python langage haut niveau - code qui est interpr√©t√© sans avoir besoin de le compiler - de ce fait interaction facile et rapide
- formation bas√©e sur contenu de [software carpentry](http://swcarpentry.github.io/python-novice-inflammation)
- langage tr√®s utilis√© dans la science des donn√©es, dev web, framework web, intelligence artificielle

#### Jupyter notebook

Un notebook pr√©sente un noyau (python ici) qui permet de faire des calculs dans le document cr√©er (existe aussi avec R)  
Page web avec texte, code, .... comme rmarkdown mais avec extension `ipynb`  
Pour exc√©cuter une section de code `shift + enter` et doit conserver l'ordre logique.  
Eviter d'utiliser ChatGPT et Copilot quand on d√©bute dans le langage. Utiliser √† l'inverse, v√©rifier des sections de codes qu'on a d√©j√† √©crit.  
üí°üí°üí° `%whos` = mot magique, liste toutes les variables existantes (`%` pr√©fixe pour certains mot magique)  
üí° Quand erreur de syntaxe, `^` pointe sous l'erreur, d√©cal√© de un caract√®re vers la droite.
üí° Utiliser `TAB` pour compl√©tion de variables d√©j√† d√©finies

#### Fondamentaux - Type de donn√©es

Certains type de donn√©es sont immutables. `List`, `set`, `dictionnary` sont modifiables.
Pour cr√©er des `strings`, possible d'utiliser `''` ou `""`. Au choix, mais rester persistant.  
üí° pour concat√©ner, pas besoin de l'√©quivalent de function `paste`

**Fonction** = bloc de code regroup√© sous un nom et qui s'exc√©cute lorsque ce nom est appel√©

```
Key points

  - Basic data types in Python include integers, strings, and floating-point numbers.
  - Use variable = value to assign a value to a variable in order to record it in memory.
  - Variables are created on demand whenever a value is assigned to them.
  - Use print(something) to display the value of something.
  - Built-in functions are always available to use.
```

#### Numpy

= [librairie](https://numpy.org/doc/stable/reference/index.html) pour manipuler matrices et tableaux  
Pour travailler avec des dataframes, utiliser la librairie [üêº pandas](https://pandas.pydata.org/)

üí° `help()` pour avoir l'aide et les informations sur une fonction  
üí° `shift + tab` pour activer l'intellisense sur une fonction  
üí° `data[:, 3]` s√©lectionne toutes les lignes `:` de la troisi√®me colonne  
üí° `ndarray` est pour <i>n dimension array</i>  
üí•üí°üí• Lors de slicing (s√©lection d'une suite de valeurs), selection **open ended** `[from: to[`  
üí•üí°üí• L'indexation commence √† **0**  
üí° `small = data[:3, 36:]` ici s√©lection des lignes de 0 √† 2 et les colonnes de 36 √† la fin.

Pour charger un jeux de donn√©es

```python
data = numpy.loadtxt(fname='data/inflammation-01.csv', delimiter=',')
```

Les librairies peuvent √™tre charg√©es avec des `alias`.

```python
import numpy as np
```

`data.dtype` permet de savoir le type des objets contenu dans la matrice `data`.  
`data.shape` donne la dimension de la matrice `data`.

Dans la fonction `numpy.mean()`, l'argument `axis = 1 ou 0` permet d'appliquer la moyenne par colonne `0` ou par ligne `1`.

Pour travailler sur certaines colonnes ou lignes qui ne suivent pas, il est n√©cessaire de cr√©er une `vue`, puis de travailler √† partir de celle-ci.

```
Key points

    - Import a library into a program using import libraryname.
    - Use the numpy library to work with arrays in Python.
    - The expression array.shape gives the shape of an array.
    - Use array[x, y] to select a single element from a 2D numpy array.
    - Array indices start at 0, not 1.
    - Use low:high to specify a slice that includes the indices from low to high-1.
    - Use `# some kind of explanation to add comments to programs.
    - Use numpy.mean(array), numpy.max(array), and numpy.min(array) to calculate simple statistics.
    - Use numpy.mean(array, axis=0) or numpy.mean(array, axis=1) to calculate statistics across the specified axis.
```

#### Matplotlib

= [üìà librairie](https://matplotlib.org/) pour visualiser des donn√©es tabulaires

#### Les listes

üí° indexation n√©gative pour acc√©der au(x) dernier(s) √©l√©ment(s)  
üí° indexation possible avec step `list[from:to:step]`  
üí° pour lister en reverse, il est indispensable d'indiquer la `step -1` pour que la lecture aille vers la gauche et non pas vers la droite.  
üí•üí°üí• Possible d'aller indexer une ou plusieurs lettres dans un string, mais cette indexation ne fonctionne pas si on veut modifier une de ces lettres.

```python
name="Darwin"
name[2] # r
name[2]="R" # ERROR
```

üí•üí°üí• ATTENTION !!!!! Les copys d'√©l√©ments ne se font pas aussi simplement que dans R. Si `list = list2`, les deux sont NON-IND√âPENDANTES. SI modification sur l'une, sera appliqu√©e √©galement sur l'autre. Pour faire ceci, utiliser `list2 = list.copy()` ou `list2 = list(list)`. T_T

```
Key Points

    - [value1, value2, value3, ...] creates a list.
    - Lists can contain any Python object, including lists (i.e., list of lists).
    - Lists are indexed and sliced with square brackets (e.g., list[0] and list[2:9]), in the same way as strings and arrays.
    - Lists are mutable (i.e., their values can be changed in place).
    - Strings are immutable (i.e., the characters in them cannot be changed).
```

#### Repeating actions with loops - `for` loop

`:` permet de terminer la d√©claration de la ligne d'instruction de la bouble. Est suivi par le corps de la boucle qui doit √™tre `indent√©`.

üí•üí°üí• `range(from, to_non_inclut, step)` est un g√©n√©rateur qui ne va pas inscrire les valeurs dans la m√©moire. Ceci permet l'optimisation quand utilisation de large s√©quence. Pour enregistrer dans une variable, n√©cessaire de faire `r = list(range(1, 6))` par exemple.

```
Key Points

    - Use for variable in sequence to process the elements of a sequence one at a time.
    - The body of a for loop must be indented.
    - Use len(thing) to determine the length of something that contains other values.

```

#### Making choice - `if` loop

- [documentation](https://docs.python.org/3/library/stdtypes.html#truth-value-testing)
- par d√©faut, tout variable vide sera consid√©r√©e comme `false` en terme bool√©en
- subtilit√© avec `None` (qui n'est pas √©quivalent √† `null`) dans une boucle. `None` est de classe `noneType` et ne peut √™tre compar√© avec d'autres type d'objet.
- Bonne pratique de code = mettre en premi√®re la condition que serait la plus souvent remplie. Optimisation !

```

Key Points

    - Use if condition to start a conditional statement, elif condition to provide additional tests, and else to provide a default.
    - The bodies of the branches of conditional statements must be indented.
    - Use == to test for equality.
    - X and Y is only true if both X and Y are true.
    - X or Y is true if either X or Y, or both, are true.
    - Zero, the empty string, and the empty list are considered false; all other numbers, strings, and lists are considered true.
    - True and False represent truth values.

```

#### Creating functions

üóùÔ∏è Functions let us reuse pieces of code frequently used with different parameters.  
üóùÔ∏è Par d√©faut, ttes fonctions retournent `«∏one`, d'o√π l'importance d'utiliser `return` dans le corps de la fonction.

<img src="https://miro.medium.com/v2/resize:fit:588/0*EVQvdvogpbKtsurb.png">

üí•üí°üí• We need to verify that our functions are behaving correctly. In order to do so, we can run each function and print out the boolean result of an equality test. We can also `assert` that our function behave correctly by using an assertion statement. An assertion will pass when the statement is True, otherwise will raise an exception and the code or function will not be allowed to continue. This is very useful in preventing bugs and ensuring correctness.  
üí° Utiliser la doc string pour ecrire l'aide de la function

```python
def fahr_to_celsius(temp):
    """
    Converts Fahrenheit to Celcius.

    Parameters:
        temp: Temperature in Fahr.

    Example:
        fahr_to_celsius(32) => 0.0
    """
    # this is a comment
    return ((temp - 32) * (5/9))

    help(fahr_to_celsius)
```

Exemple de fonction

```python
def wrap(str1="", str2="*"):
    if (isinstance(str1, str) & isinstance(str2, str)):
        print(str2, str1, str2, sep = "")
    elif type(str1) is not str:
        print("Please enter a string as first argument")
    else:
        print("Please enter a string as second argument")


wrap("value")
wrap()
wrap("value", "+")
wrap(3)
wrap("l", 4)

# *value*
# **
# +value+
# Please enter a string as first argument
# Please enter a string as second argument

```

#### Dictionnaire

Association cl√© valeur !  
La cl√© doit UNIQUE, sinon on √©crase le contenu pr√©c√©dent.
Pour visualisation plus sympa des gros dictionnaire

```python
from pprint import pprint

pprint(d)
```

`pprint` is for pretty print - mais fonctionnel √† partir d'une certaine quantit√© d'information dans le dictionnaire (fonctionne aussi avec d'autres types d'objets)

Pour visualiser la liste des cl√©s-valeurs dans le dictionnaire, possible d'utiliser le code suivant (utilis√© fr√©quemment):

```python
for k, v in d.items():
    print(k, v)
```

#### Data treatment

- `variable.rstrip()` remove les caract√®res dit blanc (espace, saut de ligne, ....)
- `enumerate()` donne les indices des valeurs dans une liste

<u>cf exercice de tirage de nom al√©atoire avec retrait</u>  
üí°possible aussi d'utiliser `.remove()` pour faire la sans remise  
üí°exemple possible car pas une copie de la liste nom dans la fonction, mais bien un pointeur vers le jeux de donn√©e, ce qui permet de faire sa modification √† chaque tirage.

#### Environnement virtuel sur les grappes de calculs lors des envois de t√¢ches

Jupiter Lab est id√©al pour travailler avec les notebook python (qui sont r√©cup√©rables en local).  
cf [documentation wiki](https://docs.alliancecan.ca/wiki/Python)

## Vendredi 24 mai 2024

### Analyses et Visualisation - Pier-Luc St-Onge (analyste)

- charger, modif et sauvegarder donn√©es tabulaires
- utilisation dataframe de `pandas`
- grouper des donn√©es pour faire des stats
- s√©lectionner osus-ensemble
- combiner donn√©es tabulaires
- visualiser avec `altair` (graphiques interactifs)

Formation bas√©e sur [software Carpentry](https://datacarpentry.org/python-ecology-lesson/)  
Contenu [notebook IPython](https://jupyter.a-ecole.calculquebec.cloud/user/claire/lab/tree/analyse-donnees-python/00-a_propos.ipynb)

Pour les donn√©es tabulaires, la librairie la plus courante est `pandas` (alias `pd`). Cette librairie permet la manip des donn√©es et fonctionne tr√®s bien avec d'autres librairies de visualisation.

√Ä v√©rifier mais `pandas` utilise `NaN` plut√¥t que `NA`.  
`data.function()` = m√©thode qui correspo0nd √† une fonction qui doit calculer quelque chose sur la data (ex. `.head()`, `.describe()`)  
Diff√©rent de `data.attribut` qui est une fonction qui extrait une information √† la data (par ex. `.shape`, `.columns`)  
`count` dans `data['nomColonne'].describe()` sur une colonne ne prend pas en compte les valeurs nulles.  
Les m√©thodes et attributs utilis√©s ici sont associ√©s √† `pandas`.  
`data[nomColonne].value_counts()` nombre d'occurrences par valeurs  
`data.loc[ligne, colonne]` pour s√©lectionner des rang√©es et colonnes d'un dataframe (attribut `.loc`), existe aussi `iloc` mais se comporte diff√©remment avec l'indexation  
Indice `-1` ne fonctionne pas avec `pandas`  
Pour s√©lection par crit√®res, il existe `isin()` pour aller chercher les enregistrements dont les valeurs d'une colonne correspondent √† l'une des valeurs fournies dans une liste  
M√©thode `.dropna()` permet de virer toutes lignes qui contient au moins une donn√©e manquante  
`data.isnull().sum()` va sommer tous les 'NaN' pour chaque colonne. Permet de donn√©es un aper√ßu du contenu du jeu de donn√©es

#### Visualisation

<u>Pourquoi altair? Pourquoi pas matplotlib?</u>

Bien que matplotlib soit une biblioth√®que de visualisation largement r√©pandue et relativement flexible, la programmation des graphiques ne suit pas une grammaire sp√©cifique.

Ainsi, pour ce chapitre, nous avons fait le choix de vous pr√©senter la biblioth√®que altair qui facilite la cr√©ation de graphiques hautement informatifs tout en s'int√©grant bien avec Pandas. Le fonctionnement de altair se base sur la grammaire des graphiques interactifs de Vega-Lite, ce qui rend la programmation √† la fois √©l√©gante et puissante.

Nous verrons diff√©rents concepts de visualisation qui peuvent √™tre reproduits plus ou moins facilement avec d'autres biblioth√®ques telles que `matplotlib`, `plotnine` (utilise grammaire de ggplot2) dans R, `plotly` et `seaborn`.

üí° Possible d'utiliser `plotly` pour graphique interactif, juste plus compliqu√© √† installer sur le notebook.  
üí°Voir exemple [`altair`](https://altair-viz.github.io/)  
üíÄ Attention ! Par d√©faut, `altair` a une gamme de couleur limit√©e √† 10. Si plus de valeur √† colorer, la palette devient redondante.  
üí° Palette de couleurs dans [altair](https://vega.github.io/vega/docs/schemes/)  
üí° `altair` a une technique sp√©ciale appel√©e cr√©ation de facettes permettant de diviser un graphique en plusieurs sous-graphiques selon les valeurs d'une variable.
