---
title: "Analyse et visualisation en Python"
description: "√âcole printemps Calcul Qu√©bec - Bases de bash et grappes de calcul"
author:
  - name: Claire-C√©cile Juhasz 
date: 05-21-2024
categories: [formation, √©cole d'√©t√©] # self-defined categories
image: data_cube.jpg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

# √âcole d'√©t√© - Analyses et visualisation en Python

## Day 1

![](https://jupyter.org/assets/logos/rectanglelogo-greytext-orangebody-greymoons.svg)

- cr√©ation compte sur [Jupyterhub](https://jupyter.a-ecole.calculquebec.cloud/hub/login) (voir projet [Jupyter](https://jupyter.org/) & [documentation](https://docs.jupyter.org/en/latest/) about Jupyter) - JupyterLab permet la cr√©ation d'un notebook (comme rmarkdown)
- pr√©sentation & mot de bienvenue par Charles - Canal Slack #analyse-de-donn√©es

### Formation 1 - Daniel - The Unix shell

[Carpentry formation](https://swcarpentry.github.io/shell-novice/)

Exercices dans JupyterHub  
cheat sheet interactive pour les commandes bash --> [tldr pages](https://tldr.sh/) ou [devhints](https://devhints.io/bash) mais on peut aussi utiliser `command --help` ou `man command`

prompt = invite de commande - donne le nom de usager et le nom de la machine (ici `nodex`)  
shell = faite pour entour√©e le noyau de l'ordinateur et le prot√©ger. On ne communique pas diretement avec le noyau, mais on passe par le shell  
Il existe plusieurs formes de shells pour Unix (cornshell, zshell, cshell, zshrc, ...), mais bash √©tant le plus r√©pandu. The bash shell is written in C.

Liste de commandes √† conna√Ætre:

Structure classique d'une commande `command -options argument`  
![](https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg)

| command | function | remarq |
| -------------------- | ----------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `pwd` | affiche le r√©pertoire dans lequel on se trouve actuellement | premier slash `/` correspd √† la racine d'o√π partent tous les r√©pertoires - pwd for <u>path working directory </u> |
| `ctl + l` or `clear` | nettoyer l'√©cran | |
| `ls -F` | affiche le contenu du repo dans lequel on se trouve | for list - `-F` pour discerner repo & files, `-h` montre la taille des fichiers lisibles par l'humain, `-l` for long list (contient plus d'informations), `-t` tri par date, `-S` tri par taille de fichier |
| `cd` | navigation dans un autre repo | for change directory, commande **relative** au r√©pertoire actuelle, utiliser `cd ..` pour revenir un niveau au dessus de l√† o√π je me trouve, `cd sans argument` fait repartir dans le r√©pertoire personnel `/home/user/`, `cd` peut aussi √™tre utilis√© avec un absolute path, `cd ~/project/` avec le tild qui permet de r√©f√©rer au repo personnel et `cd .` correspond au r√©pertoire actuel, `cd /` dirige vers la racine de tous les fichiers |
| `TAB completion` | pour compl√©ter √† partir de la/les premi√®res lettres des fichiers/dossiers pr√©sents dans le repo | |
|`mkdir folderName`|cr√©ation d'un r√©pertoire| for make directory - √©eviter les espaces dans les noms de files and folders (sinon cr√©ation de deux fichiers ou repo), pas d'accents non plus ou caract√®res sp√©ciaux|
|`rm -r`|effece un fichier/dossier |`-r` is for recurssive (pour les dossiers) ce qui permet de descendre dans le repo, effacer tous les fichiers puis effacer le dossier parent, `-f` pour forcer l'effacement, `-i` pour demander (interroger) si on est s√ªr de remove|
|`nano` ou `touch`|cr√©ation d'un fichier|√©quivalent d'√©diteur de texte, plus efficace √† utiliser sont `vim` ou `emacs` si on utilise beaucoup le shell, avec `touch` cr√©√© un fichier compl√®tement vide utilis√© pour des logiciels qui ont besoin d'un fichier d√©j√† existant pour √©crire les r√©sultats|
|`which`|localise les fichiers binaires||
|`mv lastNAme.txt newName.txt`|renomme un fichier ou d√©place un fichier|for move si on ajoute un absolute path dans la deuxi√®me partie de commande ex: `mv new_work.txt ~/`|
|`cp source cible`|copie un fichier|possible de donner un nouveau nom au fichier copier et de le changer de repo, utiliser `-r` si la source est un repo, la `source` peut √™tre multiple, l'essentiel √©tant que le dernier dossier soit la `cible` |
|`&&`| s√©pare deux commandes que l'on souhaite exc√©cuter successivement|s'excecute sous condition que la premi√®re fonctionne, `;` peut aussi √™tre utilis√© √† la place du double esperluette `&&`|
|`*`|wildcart (caract√®re g√©n√©rique) permettant un pattern matching|peu importe le nombre de caract√®re|
|`?`|remplace un seul caract√®re||
|`cat`|voir le contenu d'un fichier texte||
|`wc`|affiche nb lignes, nb mots et nb caract√®res|for word count, ex: `wc *.txt` applique la commande sur tous les fichiers txt et fait la somme, `-l` donne uniquement le nombre de lignes|
|`> fileName`|redire la sortie de commande vers un fichier||
|`^c`|pour annuler||
|`sort`|tri sur la prmi√®re colonne d'un fichier|`-n` pour num√©rique, `-k` qui permet de choisir sur quelle colonne tri√©e|
|`head`|r√©cup√®re les premi√®res lignes d'un fichier|`-n` permet de sp√©cifier le nombre de ligne que l'on souhaite extraire|
|`\|`|pipe|dans une succession de commande, permet d'utiliser la sortie de la premi√®re commande pour exc√©cuter la deuxi√®me et ainsi de suite|

<u>Exemple du pipe - Repr√©sente la puissance de l'utilisation du unix shell</u>  
![](https://swcarpentry.github.io/shell-novice/fig/redirects-and-pipes.svg)

==> parcourir la suite de la formation de Carpentry

### Formation 2 - H√©l√®ne Gingras - Premiers pas sur les grappes de calcul

![](https://www.calculquebec.ca/wp-content/uploads/2021/11/Narvalcouleurlogocq.png)

CIP = Calcul informatique de pointe tt calcul qui fait utilisation intensive de ress. info. ou qui est limit√© par la ressource dispo (ex. CPU, GPU, m√©moire, stockage,¬†temps)

Obj. calcul Qc = Fournir au milieu universitR des envir, informatiq et des expertises pour la recherche

**Monarque** = ordinateur quantique

√Ä disponibilit√©: grappes de calcul, espace info-nuagiques (h√©bergement de site internet par exemple) et stockage de data  
Voir la [documentation](https://docs.alliancecan.ca/wiki/Technical_documentation)  
Voir les notebooks pour de la formation
[Alliance de recherche num√©rique](https://alliancecan.ca/fr) chapote √† l'√©chelle nationale (grand coordonnateur)
![](https://alliancecan.ca/themes/custom/site_theme/images/alliance_logo_french-first.svg)

[Calcul Qu√©bec](https://www.calculquebec.ca/) est une antenne de l'alliance.

Quelle grappe choisir ?

- celle d√©j√† utilis√©e par le labo
- celle physiquement pr√©sente au plus proche (b√©luga, narval)
- celle qui correspond √† nos besoins (gna)

Pour la suite, cf la [pr√©sentation](https://drive.google.com/drive/folders/17rGmHm-AeM1WnkczDVTd12CZnAprddU4)  
Premi√®re √©tape apr√®s la connexion SSH, arriv√© sur un noeud de connexion qui donne acc√®s aux noeuds de calcul. Le noeud de login (qui peut √™tre utilis√© pour la session interactive) a acc√®s √† internet mais pas les noeuds de calcul. √Ä partir du noeud de login, acc√®s aux diff√©rents dossiers, chargement des fichiers n√©cessaires. Sur les grappes, sauvegarde automatique pour les espaces home (donc si fausse manip avec `rm`, moyen de les r√©cup√©rer). Sur le noeud de connexion, possible d'utiliser `git (clone)` via `git-lfs` pour large file system qui permet d'associer et stocker des jeux de donn√©es √† un r√©pertoire git (outil compl√©mentaire qui peut √™tre utiliser dans le souci de reproductibilit√© et transparence). Pour aller chercher les donn√©es en ligne: `wget`, `curl`, `python`, `git-lfs`.

#### <u>Les modules</u> pour cr√©er son environnement

```bash
module spider <mot cl√©>  # recherche par mot cl√©
module avail [module]    # disponible
module load <module>     # charger un module
module unload <module>   # d√©charger un module
module list              # afficher les modules activ√©s
module purge             # Revenir √† l‚Äô√©tat d‚Äôorigine
```

üí• ATTENTION ! Ne pas utiliser `conda` (probl√©matique pour les grappes)

üí° En utilisant `module spider r/4.4.0`, permet de voir quelles d√©pendances sont n√©cessaires.  
üí° Bonne pratique: toujours pr√©ciser la version des modules que l'on charge.  
üí° `module spider nom_paquet` fait du fuzzy matching et va sortir la liste des modules qui contiennent le nom du paquet. Si plusieurs et difficile de choisir √† partir de la description, utiliser le wiki ! üòÄ

#### <u>Exc√©cution des t√¢ches</u>

Ressources utilis√©es d√©pendent su type de t√¢che

- s√©quencielle - un seul coeur, sur un seul noeud - t√¢ches qui s'excecutent les unes apr√®s les autres
- en parall√®le qui utilise plusieurs coeurs potentiellement sur plusieurs noeuds - il en existe de deux types: de **donn√©es** et de **t√¢ches**. **Parall. de donn√©es** est par ex, des t√¢ches s√©quentielles sur plusieurs jeux de donn√©es en m√™me temps. **Parall. de t√¢ches** est par ex. un logiciel qui est capable d'effectuer plusieurs t√¢ches en parall. sur un m√™me jeux de donn√©es (assez rare dans certains domaines conne les sciences de la vie, mais souvent retrouv√© en astro-physique par ex).
- **ordonnanceur** - `slurm` dispatche toutes les t√¢ches dans les noeuds de calcul.

üí° utiliser `seff <jobID>` pour voir si la demande de ressource est optimale. Car si non optimis√©, cr√©dit au profil et les t√¢ches vont partir moins rapidement. Cependant, reset aux deux - trois semaines. Les priorit√©es sont ind√©pendantes d'une grappe √† l'autre, c√†d entre Beluga, Narval, ... `sshare` et `htop` pour voir l'√©tat de priorit√© quand la t√¢che est lanc√©e.

- toutes les grappes ont des limites de ressources. Par ex. pour üê¨[Narval](https://docs.alliancecan.ca/wiki/Narval/en)

üí° GPU carte pour acc√©l√©rer et n√©cessaire que pour certains logiciels (dans l'IA par ex), pas n√©cessaire pour R qui peut utiliser simplement des CPU

#### <u>Soumission des t√¢ches</u>

La soumission est faite sous la forme d'un fichier bash.

```bash
#!/bin/bash  #ligne obligatoire

#SBATCH --nodes=1 [1]
#SBATCH --cpus-per-task=1 [1]
#SBATCH --mem-per-cpu=1G [256M]
#SBATCH --time=3:00:00 [1:00:00]

#SBATCH --account=def-<sponsor>

bash script
```

Entre crochet = valeur par d√©faut

Aller voir [**Running_jobs**](https://docs.alliancecan.ca/wiki/Running_jobs) dans le wiki

cf diapo 57 de la pr√©sentation

<img src="/home/local/USHERBROOKE/juhc3201/Pictures/Screenshots/Screenshot from 2024-05-21 15-55-06.png">

#### <u>Suivi des t√¢ches</u>

`srun --jobid xxxx --pty htop -u $USER` pour avoir acc√®s au CPU en direct pendant que la t√¢che est en cours  
Possible aussi d'utiliser le portail, pour üê¨[Narval](https://portail.narval.calculquebec.ca/)

üí° Pr√©voir un peu de ressources en plus pour le temps et la m√©moire.  
üí° Commandes utiles - cf diapo 59 (`sbatch`, `squeue`, `scancel`, `seff`, `sacct`)

#### <u>Espaces de stockage disponible</u>

cf diapo 69
